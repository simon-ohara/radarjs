(function() {
  function memberChangeState() {

  }

  _root.hooks.memberChangeState = memberChangeState;

})();
;(function() {
  function RadarHooks() {
    var h, hooks = _root.hooks,
        radarHooks = {};

    for( h in hooks ) {
      radarHooks[ h ] = hooks[ h ];
    }

    return radarHooks;
  }

  _root.modules.on = RadarHooks;
})();
;(function() {
  // The model representing group objects
  //
  // can be instantiated in the following ways
  //
  // var group;
  //
  // group = new GroupModel();
  // group.id === undefined   >> true
  // group.members === []     >> true
  //
  // group = new GroupModel( "groupId" );
  // group.id === "groupId"   >> true
  // group.members === []     >> true
  //
  // group = new GroupModel({ id: "groupId" });
  // group.id === "groupId"   >> true
  // group.members === []     >> true
  //
  // group = new GroupModel( "groupId", [1,2,3] );
  // group.id === "groupId"     >> true
  // group.members === [1,2,3]  >> true
  //
  // group = new GroupModel({ id: "groupId", members: [1,2,3] });
  // group.id === "groupId"     >> true
  // group.members === [1,2,3]  >> true
  //
  // group = new GroupModel([1,2,3]);
  // group.id === undefined     >> true
  // group.members === [1,2,3]  >> true
  //
  function GroupModel() {
    var data = arguments[0];

    // Defaults
    this.id = undefined;
    this.members = [];

    // Assess the first argument
    if( data ) {
      if( typeof data === 'string' ) {
        this.id = data;
      } else if( data instanceof Array ) {
        this.members = data;
      } else {
        // It might be an object
        // Look for corresponding keys and assign appropriately
        if( data.id ) { this.id = data.id; }
        if( data.members ) { this.members = data.members; }
      } 
    }

    // Assign the second argument if it is an array
    if( arguments[1] instanceof Array ) {
      this.members = arguments[1];
    }
  }

  // Export to the package-root models object
  _root.models.group = GroupModel;
})();
;(function() {
  // The model representing member objects
  //
  // It can be instantiated in the following ways
  //
  // var member;
  //
  // member = new MemberModel();
  // member.id === undefined;
  // member.group === undefined;
  // member.state === {};
  //
  // member = new MemberModel("memberId");
  // member.id === "memberId";
  // member.group === undefined;
  // member.state === {};
  //
  // member = new MemberModel("memberId", "groupId");
  // member.id === "memberId";
  // member.group === "groupId";
  // member.state === {};
  //
  // member = new MemberModel("memberId", "groupId", { foo: "Foo Value" });
  // member.id === "memberId";
  // member.group === "groupId";
  // member.state === { foo: "Foo Value" };
  //
  // member = new MemberModel({ id: "memberId", group: "groupId", state: { foo: "Foo Value " } });
  // member.id === "memberId";
  // member.group === "groupId;
  // member.state === { foo: "Foo Value" };
  //
  function MemberModel() {
    var data = arguments[0],
        groupId = arguments[1],
        stateData = arguments[2];

    // Defaults
    this.id = undefined;
    this.group = undefined;
    this.state = {};

    // Assess the first argument
    if( data ) {
      if( typeof data === 'string' ) {
        this.id = data;
      } else {
        // It might be an object
        // Look for corresponding keys and assign appropriately
        if( data.id ) { this.id = data.id; }
        if( data.group ) { this.group = data.group; }
        if( data.state ) { this.state = data.state; }
      }
    }

    // If there is a second argument it should be the groupId
    if( groupId && typeof groupId === 'string' ) {
      this.group = groupId;
    }

    // If there is a third argument it should be a state object
    if( stateData && typeof stateData === 'object' && stateData instanceof Object ) {
      this.state = stateData;
    }

  }

  _root.models.member = MemberModel;
})();
;(function() {

  // The Store Instance
  //
  // The private data object that stores the state of groups and members
  // with references to their display bodies.
  //
  // Radar instances are given a store uid to access it
  //
  function RadarStore() {
    var uid = "store-"+Date.now();

    _root.stores[ uid ] = {};

    return uid;
  }

  _root.modules.store = RadarStore;

})();
;(function() {

  var element,
      screenWidth = _global.innerWidth,
      screenHeight = _global.innerHeight;
  
  element = _dom.createElement('canvas');
  element.id = 'RadarScreen';

  function DisplayScreen() {
    return {
      element: element,
      name: element.id,
      width: screenWidth,
      height: screenHeight,
      center: physics.vector( screenWidth, screenHeight ).mult( 0.5 ) 
    };
  }

  _root.display.modules.screen = DisplayScreen;
})();
;(function() {
  function DisplayRenderer() {
    var screen = this.screen;

    var thisConfig = {
      el: screen.name,
      width: screen.width,
      height: screen.height,
      meta: false
    };

    return physics.renderer( 'canvas', thisConfig );
  };

  _root.display.modules.renderer = DisplayRenderer;
})();
;(function() {

  // Register a new body based on a circle
  physics.body('base', 'circle', function( parent ) {
    return {
      init: function( options ) {
        parent.init.call( this, options );
      }
    };
  });

  // A class that generates a PhysicsJS Body
  function BaseBody( options ) {
    var prop, baseBody = physics.body( 'base', options );

    // Merge the PhysicsJS body object into this class
    for( prop in baseBody ) {
      if( baseBody.hasOwnProperty( prop ) ) {
        this[ prop ] = baseBody[ prop ];
      } 
    }
    this.__proto__ = baseBody.__proto__;
  }

  _root.display.bodies.base = BaseBody;

})();
;(function() {
  var BaseBody = _root.display.bodies.base,

  groupRGB = '189, 195, 199',
  options = {
    x: 300,
    y: 300,
    restitution: 0.99,
    radius: 30,
    mass: 4,
    styles: {
      fillStyle: 'rgba(' + groupRGB + ', 0.15)',
      strokeStyle: 'rgba(' + groupRGB + ', 0.1)',
      lineWidth: 15
    }
  };

  function GroupBody( groupId ) {
    this.entity = 'group';
    this.id = groupId;
    this.__proto__ = new BaseBody( options );
  }

  _root.display.bodies.group = GroupBody;

})();
;(function() {
  var BaseBody = _root.display.bodies.base,

  options = {
    radius: 5,
    mass: 100,
    styles: {
      fillStyle: 'rgba(46, 204, 113, 1)'
    }
  };

  function MemberBody( memberId ) {
    this.entity = 'member';
    this.id = memberId;
    this.__proto__ = new BaseBody( options ); 
  }

  _root.display.bodies.member = MemberBody;

})();
;(function() {

  var bodies = _root.display.bodies;

  function DisplayBodies() {
    return {
      group: bodies.group,
      member: bodies.member
    };
  }

  _root.display.modules.bodies = DisplayBodies;

})();
;(function() {

  function Display() {
    var prop, engine, _this = this;

    this._radar = {
      behaviors: []
    };

    applyDisplayModules.call( this );

    engine = physics( function(world) {
      // subscribe to events
      world.on('step', function() { world.render(); });
      // world.on({
        // 'step': function() { world.render(); },
        // 'service:convoy:added': addConvoy,
        // 'service:convoy:removed': removeConvoy,
        // 'service:container:added': addContainer,
        // 'service:container:removed': removeContainer,
        // 'service:container:updated': updateContainer
      // });

      world.add( _this.renderer );
      // apply settings to world
      // world.add([
        // Physics.behavior('container-behavior'),
        // Physics.behavior('convoy-behavior'),
        // Physics.behavior('convoy-interact'),
        // Physics.behavior('lockring-behavior'),
        // viewPortEdge,
      // ]);

      // subscribe to ticker to advance the simulation
      physics.util.ticker.on( function( time, dt ){
        world.step( time );
      });
    });

    for( prop in engine ) {
      if( engine.hasOwnProperty( prop ) ) {
        this[ prop ] = engine[ prop ];
      }
    }

    this.__proto__ = engine.__proto__;

    this.findAll = function( entity ) {
      return this.find({ entity: entity });
    };

    this.findMembersOfGroup = function( groupId ) {
      return this.find({ entity: 'member', group: groupId });
    };

    this.findBehaviorById = function( behaviorId ) {
      var b, behaviors = this.getBehaviors(),
          numBehaviors = behaviors.length,
          targetBehavior;

      for( b=0; b<numBehaviors; b++ ) {
        if( behaviors[b].options.id === behaviorId ) {
          targetBehavior = behaviors[b];
          break;
        }
      } 

      return targetBehavior;
    };
  }

  function applyDisplayModules() {
    var module, modules = _root.display.modules;

    for( module in modules ) {
      this[ module ] = modules[ module ].call(this);
    }
  }

  function RadarDisplay() {
    var display =  new Display();
    display.add( display._radar.behaviors );

    return display;
  }

  _root.modules.display = RadarDisplay;

})();
;(function() {

  var Group = _root.models.group,
      GroupBody = _root.display.bodies.group;

  function GroupController() {
    var store = _root.stores[ this.store ],
        display = this.display;

    store.groups = {};

    function addBody( groupId ) {
      var body = new GroupBody( groupId );

      display.addBody( body );

      return body; 
    }

    return {

      create: function( groupId ) {
        var newGroup = new Group( groupId );
        newGroup.body = addBody( groupId );

        store.groups[ groupId ] = newGroup;
        display.emit( 'display:group:added', newGroup );

        return newGroup;
      },

      read: function( groupId ) {
        return store.groups[ groupId ];
      },

      update: function() {},

      destroy: function() {},

      check: function() {}
    };
  }

  _root.modules.groupController = GroupController;

})();
;(function() {

  var Member = _root.models.member,
      MemberBody = _root.display.bodies.member;

  function MemberController() {
    var radar = this,
        store = _root.stores[ radar.store ],
        display = radar.display,
        groupController = radar.groupController;

    store.members = {};

    function addBody( memberId ) {
      var body = new MemberBody( memberId );

      display.addBody( body );

      return body; 
    }

    function setBodyPosition( member, group ) {
      var position, offset;

      position = group.state.pos;
      offset = group.radius / 2;
      member.state.pos.x = position.x - offset;
      member.state.pos.y = position.y - offset;
    }

    return {

      create: function( memberId, groupId ) {
        var newMember, memberGroup;

        memberGroup = store.groups[ groupId ]; 

        newMember = new Member( memberId, groupId );
        newMember.body = addBody( memberId );
        newMember.body.group = groupId;

        setBodyPosition( newMember.body, memberGroup.body );

        store.members[ memberId ] = newMember;
        memberGroup.members.push( memberId );
        display.emit( 'display:member:added', newMember );

        return newMember;
      },

      read: function( memberId ) {
        return store.members[ memberId ];
      },

      update: function( member, stateData ) {
        var prop, oldState = member.state;

        for(prop in stateData) {
          if( stateData.hasOwnProperty( prop ) ) {
            member.state[ prop ] = stateData[ prop ];
          }
        }

        // Trigger Hook
        radar.on.memberChangeState( member, oldState );

        return member;
      },

      destroy: function( member ) {
        var idx, group, members, removed;

        // Remove body from the display
        display.removeBody( member.body );
        
        group = store.groups[ member.group ];
        members = group.members;
        idx = members.indexOf( member );

        // Remove the reference from group members
        removed = members.splice( idx, 1 );
        groupController.check();

        delete store.members[ member.id ];
      }
    };
  }

  _root.modules.memberController = MemberController;

})();
;(function() {

  // A controller to manage data in the private root store object
  //
  // methods: add, get, set, remove
  //
  function StoreController() {
    var radar = this,
        store = _root.stores[ radar.store ],
        grp = radar.groupController,
        mbr = radar.memberController;

    function add( id, groupId ) {
      if( groupId ) {
        return mbr.create.apply( radar, arguments );
      }

      return grp.create( id );
    }

    function get( id ) {
      return mbr.read( id ) || grp.read( id );
    }

    function update( data ) {
      var group, member;

      if( check( data ).isValid ) {
        // Check to see if grou exists
        if( get( data.group ) === undefined ) {
          // Create group if not
          add( data.group );
        }
        // Find or create the member object
        member = get( data.member ) || add( data.member, data.group );
        // Update the member object with the passed state
        return mbr.update( member, data.state );
      }
    }

    function remove( member ) {
      return mbr.destroy( member );
    }

    return {
      update: update,
      get: get,
      remove: remove
    };
  }


  // Check the validity of the data being passed through
  //
  // data should be of the structure
  //  {
  //    member: "member ID as a string",
  //    group: "group ID as a string",
  //    state: {} // an object containing arbitrary data
  //  }
  //
  // returns an object with an isValid property set to a boolean value
  //
  function check( data ) {
    var requiredProperties = [ "member", "group", "state" ],
        missingProperties = [],
        result = { isValid: false };

    // The data param must be an object
    if(typeof data !== 'object') {
      throw new TypeError("Invalid argument type: '" + data + "' is not an object.");
    }

    // Does data contain all of the required properties?
    if( data.member && data.group && data.state ) {
      result.isValid = true;
      return result;
    } else {
      requiredProperties.map( function( propertyName, index, propertiesArray ) {
        if( data[ propertyName ] === undefined ) {
          missingProperties.push( propertyName );
        }
      });

      throw new DataStructureError("Invalid Data Structure: The argument passed doe not contain the properties " + missingProperties.join(" or "));
    }

    return result;
  }

  // Export the StoreController to the package-root modules object
  _root.modules.storeController = StoreController;
})();
;(function() {
  var memberBehaviors = [
    { name: 'body-impulse-response', id: 'impulse' },
    { name: 'sweep-prune', id: 'sweep' },
    { name: 'body-collision-detection', id: 'collision' }
  ];

  function behaviorMethods() {
    var display = this;

    function applyMemberBehavior( member ) {
      var attractor, containment, allMembers, siblingMembers;

      attractor = display.findBehaviorById('member:attractor:' + member.group);
      containment = display.findBehaviorById('member:containment:' + member.group);
      allMembers = display.findAll('member');
      siblingMembers = display.findMembersOfGroup( member.group );

      // Update each behaviors targets
      memberBehaviors.map( function( item, index, arr ) {
        display.findBehaviorById( 'member:' + item.id ).applyTo( allMembers );
      }, this);
      // Update the member attractor of the group
      attractor.applyTo( siblingMembers );
      containment.applyTo( siblingMembers );
    }

    return function( parent ) {
      return {
        init: function( options ) {
          parent.init.call( this );
          this.options( options );
        },
        connect: function( world ) {
          world.on('display:member:added', applyMemberBehavior, this);
          // world.on('store:member:updated', updateMember, this);
          // world.on('display:member:updated', this.updateMemberBehaviors, this);
          memberBehaviors.map( function( item, index, arr ) {
            var newBehavior = physics.behavior( item.name, { id: 'member:' + item.id });
            world.addBehavior( newBehavior.applyTo( [] ) );
          }, this);
        },
        disconnect: function( world ) {
          // Remove member behaviors
          memberBehaviors.map( function( item, index, arr ) {
            var behavior = display.findBehaviorById( 'member:' + item.id );
            world.removeBehavior( behavior );
          }, this);
          // Unsubscribe from events
          world.off('display:member:added', applyMemberBehavior, this);
          // world.off('store:member:added', addMember, this);
          // world.off('store:member:updated', updateMember, this);
        }
      };
    };
  }

  function MemberBehavior( display ) {
    // Register new behavior with the physics engine
    physics.behavior( 'member', behaviorMethods.call( this ) );

    this._radar.behaviors.push( physics.behavior( 'member', { id: 'display:member' } ) );
  }

  _root.display.modules.memberBehavior = MemberBehavior;
  
})();
;(function() {

  var attractors  = {
        global: physics.behavior('attractor', {
          id: 'group:attractor',
          order: 1,
          strength: 0.001
        })
      },
      containers = {},
      groupBehaviors = [
        attractors.global,
        physics.behavior('body-impulse-response', { id: 'group:impulse' }),
        physics.behavior('sweep-prune', { id: 'group:sweep' }),
        physics.behavior('body-collision-detection', { id: 'group:collision' }),
        // physics.behavior('body-collision-detection', { channel: 'display:lockring:collided' }),
        // physics.behavior('interactive-custom', { el: radar.canvas })
      ];


  function behaviorMethods() {
    var display = this;

    // Set the position of the global attractor
    attractors.global.position( display.screen.center );

    function applyGroupBehavior( group ) {
      updateGroupBehaviors();
      addGroupMemberAttractor( group.body );
      addGroupMemberContainment( group.body );
    }

    function updateGroupBehaviors() {
      groupBehaviors.map( function( item, index, arr ) {
        item.applyTo( display.findAll('group') );
      }, this);
      // groupBehaviors['lockring-collisions'].applyTo( entities.groups.concat(lockRing) );
    }

    function addGroupMemberAttractor( groupBody ) {
      var attractor = physics.behavior('attractor', {
        order: 1,
        strength: 0.001,
        groupTarget: groupBody.id,
        id: 'member:attractor:' + groupBody.id
      });

      // Set the position of the attractor to match the group
      attractor.position( groupBody.state.pos );
      // Ensure that the behavior is not applied to any existing bodies
      attractor.applyTo( [] );
      // store reference
      attractors[ groupBody.id ] = attractor;
      // add to the display
      display.addBehavior( attractor );
    }

    function addGroupMemberContainment( groupBody ) {
      var groupBounds, groupEdgeCollision, diameter;

      diameter = groupBody.radius * 2;

      groupBounds = physics.aabb(diameter, diameter, groupBody.state.pos),

      groupEdgeCollision = physics.behavior('edge-collision-detection', {
        aabb: groupBounds,
        restitution: 0.99,
        cof: 0.99,
        id: 'member:containment:' + groupBody.id
      });

      // Ensure that the behavior is not applies to any existing bodies
      groupEdgeCollision.applyTo( [] );
      // store a reference
      containers[ groupBody.id ] = {
        bounds: groupBounds,
        collision: groupEdgeCollision
      };
      // add to the world
      display.addBehavior( groupEdgeCollision );
    }

    // This could be used to adjust the position on the
    // window/screen resize event
    // function updateGlobalAttractor() {
    //   attractors.global.position( display.screen.center );
    // }

    // Returnable
    return function( parent ) {
      return {
        init: function( options ) {
          parent.init.call( this );
          this.options( options );
        },
        connect: function( world ) {
          // Add group behaviors
          groupBehaviors.map( function( item, index, arr ) {
            world.addBehavior( item.applyTo( [] ) );
          });

          // Subscribe to Events
          world.on('display:group:added', applyGroupBehavior, this);
          world.on('integrate:positions', this.behave, this);



          // world.on('store:group:added', addGroup, this);
          // world.on('store:group:added', this.testing, this);
          // world.on('display:container:added', this.updateGroup, this);
          // world.on('display:container:removed', this.checkContainers, this);

          // world.on('radar:lock:established', this.removeInteraction, this);
          // world.on('radar:lock:released', this.applyInteraction, this);
          // world.on('collisions:candidates', physics.util.throttle( this.lockCheck, 500), this);

          // physics.behavior('group-interaction'),

          // this.applyInteraction( world );
        },
        disconnect: function( world ) {
          // Remove group behaviors
          groupBehaviors.map( function( item, index, arr ) {
            world.removeBehavior( item );
          });
          // Unsubscribe from Events
          world.off('display:group:added', applyGroupBehavior, this);
          world.off('integrate:positions', this.behave, this);
          // world.off('manifest:container:updated', this.updateContainer, this);
          // world.off('radar:container:added', this.containerAdded, this);
          // world.off('integrate:positions', this.behave, this);
        },
        // removeGroupAttractor: function( groupBody ) {
        //   var attractor = attractors[groupBody.id];

        //   if(attractor === undefined) {
        //     return false;
        //   } else {
        //     view.remove( attractor );
        //     delete attractor;
        //     return true;
        //   }
        // },
        // updateGroup: function( containerData ) {
        //   var groupName = containerData.group,
        //       containers = this.groupContainers( groupName );

        //   attractors[groupName].applyTo( containers );
        //   edges[groupName].collision.applyTo( containers );
        // },
        behave: function( data ) {
          var c, currentGroup, attractor,
              groupsList = display.findAll('group'),
              numGroups = groupsList.length,
              groupEdge, groupAttractor;

          for (c=0; c<numGroups; c++) {
            currentGroup = groupsList[c];
            groupAttractor = attractors[currentGroup.id];
            groupEdge = containers[currentGroup.id];

            groupAttractor.position( currentGroup.state.pos );

            groupEdge.bounds.x = currentGroup.state.pos.x;
            groupEdge.bounds.y = currentGroup.state.pos.y;
            groupEdge.collision.setAABB( groupEdge.bounds );
          }
        }
      };
    };
  }

  function GroupBehavior() {
    // Register new behavior with the physics engine
    physics.behavior( 'group', behaviorMethods.call( this ) );

    this._radar.behaviors.push( physics.behavior( 'group', { id: 'display:group' }));
  }

  _root.display.modules.groupBehavior = GroupBehavior;

})();
